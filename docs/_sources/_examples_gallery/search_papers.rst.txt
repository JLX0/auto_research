
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples_gallery/search_papers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__examples_gallery_search_papers.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_gallery_search_papers.py:


.. _search_papers_page:

Automatically Search and Download Papers
=====================================

This script demonstrates the usage of `AutoSearch` from the :mod:`auto_research.search.core` module to:

- Perform a search for research papers based on specified keywords.
- Retrieve a specified number of articles.
- Sort the results by relevance or date.
- Apply filters such as a date cutoff and a minimum score threshold (:mod:`auto_research.search.core.AutoSearch.score_threshold`).
- Save the downloaded articles and metadata to a specified folder.


This script assumes that:

- The destination folder for storing search results exists or will be created.

.. GENERATED FROM PYTHON SOURCE LINES 21-77




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ------Searching for the 1th keyword 'Diffusion models'------
    Searching papers:   0%|          | 0/3 [00:00<?, ?it/s]    Searching papers:  33%|███▎      | 1/3 [00:04<00:09,  4.55s/it]    Searching papers:  67%|██████▋   | 2/3 [00:07<00:03,  3.85s/it]    Searching papers: 100%|██████████| 3/3 [00:11<00:00,  3.90s/it]    Searching papers: 100%|██████████| 3/3 [00:11<00:00,  3.96s/it]


    Paper 1:
    Title: Diffusion models: A comprehensive survey of methods and applications
    Abstract:

    Being the most cutting-edge generative methods, diffusion methods have shown
    great advances in wide generation tasks. Among them, graph generation attracts
    significant research attention for its broad application in real life. In our
    survey, we systematically and comprehensively review on diffusion-based graph
    generative methods. We first make a review on three mainstream paradigms of
    diffusion methods, which are denoising diffusion probabilistic models,
    score-based genrative models, and stochastic differential equations. Then we
    further categorize and introduce the latest applications of diffusion models on
    graphs. In the end, we point out some limitations of current studies and future
    directions of future explorations. The summary of existing methods metioned in
    this survey is in
    https://github.com/zhejiangzhuque/Diffusion-based-Graph-Generative-Methods.
    Combined Score: 31.775648148732735
    Citation count: 1486
    Year of publication: 2023
    Publication venue: ACM Computing Surveys
    Authors: L Yang, Z Zhang, Y Song, S Hong, R Xu, Y Zhao


    Link: https://arxiv.org/pdf/2209.00796
    ArXiv Link: http://arxiv.org/pdf/2401.15617v2
    Downloading Diffusion models A comprehensive survey of methods and applications.pdf... with upper time limit: 10 seconds
    Downloaded: Diffusion models A comprehensive survey of methods and applications.pdf.


    Paper 2:
    Title: Diffusion models in vision: A survey
    Abstract:

    Diffusion models have become a new SOTA generative modeling method in various
    fields, for which there are multiple survey works that provide an overall
    survey. With the number of articles on diffusion models increasing
    exponentially in the past few years, there is an increasing need for surveys of
    diffusion models on specific fields. In this work, we are committed to
    conducting a survey on the graph diffusion models. Even though our focus is to
    cover the progress of diffusion models in graphs, we first briefly summarize
    how other generative modeling methods are used for graphs. After that, we
    introduce the mechanism of diffusion models in various forms, which facilitates
    the discussion on the graph diffusion models. The applications of graph
    diffusion models mainly fall into the category of AI-generated content (AIGC)
    in science, for which we mainly focus on how graph diffusion models are
    utilized for generating molecules and proteins but also cover other cases,
    including materials design. Moreover, we discuss the issue of evaluating
    diffusion models in the graph domain and the existing challenges.
    Combined Score: 26.558112382722783
    Citation count: 1242
    Year of publication: 2023
    Publication venue: IEEE Transactions on Pattern Analysis and Machine Intelligence
    Authors: FA Croitoru, V Hondru, RT Ionescu


    Link: https://arxiv.org/pdf/2209.04747
    ArXiv Link: http://arxiv.org/pdf/2304.01565v1
    Downloading Diffusion models in vision A survey.pdf... with upper time limit: 10 seconds
    Downloaded: Diffusion models in vision A survey.pdf.


    Paper 3:
    Title: Variational diffusion models
    Abstract:

    The problem of spin diffusion is studied numerically in one-dimensional
    classical Heisenberg model using a deterministic odd even spin precession
    dynamics. We demonstrate that spin diffusion in this model, like energy
    diffusion, is normal and one obtains a long time diffusive tail in the decay of
    autocorrelation function (ACF). Some variations of the model with different
    coupling schemes and with anisotropy are also studied and we find normal
    diffusion in all of them. A systematic finite size analysis of the Heisenberg
    model also suggests diffusive spreading of fluctuation, contrary to previous
    claims of anomalous diffusion.
    Combined Score: 3.699350861975652
    Citation count: 1034
    Year of publication: 2021
    Publication venue: arXiv.org
    Authors: D Kingma, T Salimans, B Poole


    Link: https://proceedings.neurips.cc/paper/2021/file/b578f2a52a0229873fefc2a4b06377fa-Paper.pdf
    ArXiv Link: http://arxiv.org/pdf/1212.2829v1
    Downloading Variational diffusion models.pdf... with upper time limit: 10 seconds
    Downloaded: Variational diffusion models.pdf.

    The above displays all paper with a combined score no less than 0.5
    Metadata saved to search_results/metadata.json

    Folder saved to search_results.zip
    ------Searching for the 2th keyword 'Generative modeling for computer vision'------
    Searching papers:   0%|          | 0/3 [00:00<?, ?it/s]    Searching papers:  33%|███▎      | 1/3 [00:03<00:06,  3.13s/it]    Searching papers:  67%|██████▋   | 2/3 [00:06<00:02,  2.98s/it]    Searching papers: 100%|██████████| 3/3 [00:09<00:00,  2.99s/it]    Searching papers: 100%|██████████| 3/3 [00:09<00:00,  3.00s/it]

    The above displays all paper with a combined score no less than 0.5
    Metadata saved to search_results/metadata.json

    Folder saved to search_results.zip






|

.. code-block:: Python


    from auto_research.search.core import AutoSearch


    def main() -> None:
        """
        Main function to execute the AutoSearch process.

        This function initializes the search parameters, creates an instance of the `AutoSearch` class,
        and runs the search to retrieve and store the articles.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """

        # Keywords can be a string or a list of strings. If keywords is a string, then perform a
        # search over the single keyword. If keywords is a list of strings, then perform a
        # search over each keyword in the list. Same articles from the search based on
        # different keywords will not be downloaded twice.
        keywords = ["Diffusion models", "Generative modeling for computer vision"]

        # Number of articles to retrieve at maximum.
        num_results = 3

        # Choose one between "relevance" and "date" for Google Scholar search engine
        sort_by = "relevance"

        # Date cutoff is relevant only when sort_by is set as "date".
        date_cutoff = "2024-12-01"

        # Minimum score that the article must have to be downloaded.
        score_threshold = 0.5

        # Path where the downloaded articles and metadata will be stored.
        destination_folder = "search_results"

        # Initialize the AutoSearch instance with the specified parameters.
        paper_search = AutoSearch(
            keywords=keywords,
            num_results=num_results,
            sort_by=sort_by,
            date_cutoff=date_cutoff,
            score_threshold=score_threshold,
            destination_folder=destination_folder,
        )

        # Run the search to retrieve and store the articles.
        paper_search.run()


    if __name__ == "__main__":
        main()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 30.797 seconds)


.. _sphx_glr_download__examples_gallery_search_papers.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: search_papers.ipynb <search_papers.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: search_papers.py <search_papers.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: search_papers.zip <search_papers.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
