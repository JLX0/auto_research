from typing import List

from LLM_utils.inquiry import extract_code
from LLM_utils.inquiry import OpenAI_interface
from LLM_utils.prompter import PromptBase


def base_prompt_list(research_topic_prompt_string: str) -> List[str]:
    """
    Constructs a structured prompt to guide the generation of related keywords for a given
    research topic.

    Args:
        research_topic_prompt_string (str): A detailed description of the research topic for which related keywords are needed.

    Returns:
        list: A list of strings that form the structured prompt. The prompt instructs the model to
        generate a Python list of related keywords, including acronyms, full forms, synonyms, and
        similar terminologies, ranked by relevance.
    """  # noqa: E501
    prompt_string = []
    prompt_string += [
        "A researcher is trying to search related articles for a given research topic. Your task"
        " is to analyze the description for the research topic and then provide a list of related"
        " keywords. The keywords are the keywords typed into a search engine for scholarly"
        " articles, such as Google Scholar."
    ]
    prompt_string += ["Below is the description for the research topic:"]
    prompt_string += [research_topic_prompt_string]
    prompt_string += ["Your answer must be a Python list of strings."]
    prompt_string += [
        "For each keyword, there should also be the acronyms, full form of acronyms, synonyms,"
        " interchangeable terminologies, similar methods, similar topics, and paraphrases for the"
        " keyword, if applicable. Ignore the difference between plural and singular forms and"
        " capitalized and decapitalized forms."
    ]
    prompt_string += [
        "For example, an answer can be ['reinforcement learning and evolutionary computation',"
        " 'RL and EC', 'reinforcement learning for evolutionary computation', 'reinforcement"
        " learning with evolutionary computation', 'interaction between reinforcement learning"
        " and evolutionary computation', 'reinforcement learning and evolutionary algorithms',"
        " 'reinforcement learning for evolutionary algorithms', ...]. Your answer should avoid the"
        " abbreviation sign and include the full list."
    ]
    prompt_string += [
        "The keywords in the list should be ranked from the most relevant to the least relevant."
        " Each keyword should be an academic terminology suitable as the keyword for a search"
        " engine for academic articles."
    ]
    prompt_string += ["Your answer must be only the Python list, no other text."]
    prompt_string += ["Here is the Python list:"]
    return prompt_string


def test_as_list(raw_response: str) -> List[str]:
    """
    Validates and extracts a Python list from the raw response generated by the OpenAI model.

    Args:
        raw_response (str): The raw response string from the OpenAI model.

    Returns:
        list: The extracted Python list from the raw response.

    Raises:
        AssertionError: If the extracted object is not a list.
    """
    extraction = extract_code(raw_response, mode="python_object")
    assert isinstance(extraction, list), f"The answer is {extraction} but it should be a list"
    return extraction


def suggest_keywords(user_prompt: str, model: str, api_key: str) -> List[str]:
    """
    Generates a list of related keywords for a given research topic using the OpenAI model.

    Args:
        user_prompt (str): A detailed description of the research topic for which related keywords are needed.
        model (str): The name of the OpenAI model to be used for generating the keywords.
        api_key (str): The API key for accessing the OpenAI model.

    Returns:
        list: A list of related keywords generated by the OpenAI model, ranked by relevance.
    """  # noqa: E501
    OpenAI_instance = OpenAI_interface(api_key=api_key, model=model)
    prompt_list = base_prompt_list(user_prompt)
    prompt_formatted = PromptBase.list_to_formatted_OpenAI(prompt_list)
    response, _ = OpenAI_instance.ask_with_test(prompt_formatted, test_as_list)
    return response
